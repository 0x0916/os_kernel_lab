              vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
                  vvvvvvvvvvvvvvvvvvvvvvvvvvvv
rrrrrrrrrrrrr       vvvvvvvvvvvvvvvvvvvvvvvvvv
rrrrrrrrrrrrrrrr      vvvvvvvvvvvvvvvvvvvvvvvv
rrrrrrrrrrrrrrrrrr    vvvvvvvvvvvvvvvvvvvvvvvv
rrrrrrrrrrrrrrrrrr    vvvvvvvvvvvvvvvvvvvvvvvv
rrrrrrrrrrrrrrrrrr    vvvvvvvvvvvvvvvvvvvvvvvv
rrrrrrrrrrrrrrrr      vvvvvvvvvvvvvvvvvvvvvv  
rrrrrrrrrrrrr       vvvvvvvvvvvvvvvvvvvvvv    
rr                vvvvvvvvvvvvvvvvvvvvvv      
rr            vvvvvvvvvvvvvvvvvvvvvvvv      rr
rrrr      vvvvvvvvvvvvvvvvvvvvvvvvvv      rrrr
rrrrrr      vvvvvvvvvvvvvvvvvvvvvv      rrrrrr
rrrrrrrr      vvvvvvvvvvvvvvvvvv      rrrrrrrr
rrrrrrrrrr      vvvvvvvvvvvvvv      rrrrrrrrrr
rrrrrrrrrrrr      vvvvvvvvvv      rrrrrrrrrrrr
rrrrrrrrrrrrrr      vvvvvv      rrrrrrrrrrrrrr
rrrrrrrrrrrrrrrr      vv      rrrrrrrrrrrrrrrr
rrrrrrrrrrrrrrrrrr          rrrrrrrrrrrrrrrrrr
rrrrrrrrrrrrrrrrrrrr      rrrrrrrrrrrrrrrrrrrr
rrrrrrrrrrrrrrrrrrrrrr  rrrrrrrrrrrrrrrrrrrrrr

       INSTRUCTION SETS WANT TO BE FREE
(THU.CST) os is loading ...

Special kernel symbols:
  entry  0x8020000c (virtual)
  etext  0x8020f2da (virtual)
  edata  0x80293098 (virtual)
  end    0x80298a40 (virtual)
Kernel executable memory footprint: 611KB
memory management: default_pmm_manager
physcial memory map:
  memory: 0x00600000, [0x80200000, 0x807fffff].
check_alloc_page() succeeded!
check_pgdir() succeeded!
check_boot_pgdir() succeeded!
use SLOB allocator
kmalloc_init() succeeded!
check_vma_struct() succeeded!
Store/AMO page fault
page falut at 0x00000100: K/W
check_pgfault() succeeded!
check_vmm() succeeded.
sched class: stride_scheduler
Initrd: 0x80216000 - 0x8021dcff, size: 0x00007d00
Initrd: 0x8021dd00 - 0x80292fff, size: 0x00075300
SWAP: manager = fifo swap manager
BEGIN check_swap: count 1, total 892
setup Page Table for vaddr 0X1000, so alloc a page
setup Page Table vaddr 0~4MB OVER!
set up init env for check_swap begin!
Store/AMO page fault
page falut at 0x00001000: K/W
Store/AMO page fault
page falut at 0x00002000: K/W
Store/AMO page fault
page falut at 0x00003000: K/W
Store/AMO page fault
page falut at 0x00004000: K/W
set up init env for check_swap over!
write Virt Page c in fifo_check_swap
write Virt Page a in fifo_check_swap
write Virt Page d in fifo_check_swap
write Virt Page b in fifo_check_swap
write Virt Page e in fifo_check_swap
Store/AMO page fault
page falut at 0x00005000: K/W
swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
write Virt Page b in fifo_check_swap
write Virt Page a in fifo_check_swap
Store/AMO page fault
page falut at 0x00001000: K/W
swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
write Virt Page b in fifo_check_swap
Store/AMO page fault
page falut at 0x00002000: K/W
swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
write Virt Page c in fifo_check_swap
Store/AMO page fault
page falut at 0x00003000: K/W
swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
write Virt Page d in fifo_check_swap
Store/AMO page fault
page falut at 0x00004000: K/W
swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
write Virt Page e in fifo_check_swap
Store/AMO page fault
page falut at 0x00005000: K/W
swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
swap_in: load disk swap entry 6 with swap_page in vadr 0x5000
write Virt Page a in fifo_check_swap
Load page fault
page falut at 0x00001000: K/R
swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
count is 0, total is 6
check_swap() succeeded!
sfs: mount: 'simple file system' (111/6/117)
vfs: mount disk0.
++ setup timer interrupts
kernel_execve: pid = 2, name = "sh".
Environment call from S-mode
-- szx do_execve : argc is 1 --
-- szx sysfile_open ==
-- szx file_open --
-- szx vfs_open --
-- szx vop_open tag0 --
-- szx vop-open tag1 --
-- szx vfs_open tag2 --
-- szx sysfile_open ==
-- szx file_open --
-- szx vfs_open --
-- szx vop_open tag0 --
-- szx vop-open tag1 --
-- szx vfs_open tag2 --
-- szx sysfile_open ==
-- szx file_open --
-- szx vfs_open --
-- szx vop_open tag0 --
-- szx vop-open tag1 --
-- szx vfs_open tag2 --
user sh is running!!!
-- szx argc = 0000000000000001 ==
-- szx : argc==1 0, argc-1 0 --
-- szx : argc==2 0, argc-2 -1 --
-- szx : argc>2 1 --
-- szx main tag1 ==
-- szx reopen: fd2 0, filename sh, open_flags:0 --
-- szx sysfile_open ==
-- szx file_open --
-- szx vfs_open --
-- szx vop_open tag0 --
-- szx vop-open tag1 --
-- szx vfs_open tag2 --
ELFó†€@¨-@8@   € €€€0 € €0]q"è>ü2„<.†ª…¥Üì6ô:øÂàÆä>äï ¢e"…ïÀ%âï`YUïÀ]q"è>ü2„<.†ª…¥Úì6ô:øÂàÆä>äï ¢e"…ïÀ%Þï`â`Bdaa‚€uqºøºà®ì²ð¶ô¾üBáFå*Æ.ô2ø6ü:ð¾äsfs: cleanup: 'simple file system' (111/6/117)
all user-mode processes have quit.
init check memory pass.
kernel panic at kern/process/proc.c:537:
    initproc exit.

Welcome to the kernel debug monitor!!
Type 'help' for a list of commands.
Power off
